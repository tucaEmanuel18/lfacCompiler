BEGIN;
int var := 53;
bool array[25];
float aha := 5.000000;
while var > aha ;
if se_pare_ca_merge ;
x := 5 + var;
string id := "hahaha";
char id2 := '?';
END


####### De facut (daca nu mai avem ce face cu timpul)
caps punct
{
	int x, y;
}
const punct ORIGINE { x := 0, y := 0}



///  LIST_OF_PARAMETER    | CONST IDENTIFIER IDENTIFIER                                            {/*conditie: primul identifier sa fie de tip caps*/}
         				  | LIST_OF_PARAMETER ',' CONST IDENTIFIER IDENTIFIER                      {/*conditie: primul identifier sa fie de tip caps*/}


##############

functie:
{
	<	DECLARATII
		functie
		{
			<declaratii>
			<bloc>
		}
	>

	<BLOC>
}



#################################################3

// TESTE DECLARATII VARIABILE
int x;
int y;
int x, y, z;
float aha[50];
int x[50], z, y[5];
int x := 7;
int x := 5, z := 3;
char x[3] := {'1','2','3'}, z[2] := {'1','2'};
char nume[10] := {'i','o','a'};
float var;
char c;
string nume;
string prenume;
bool compara;

//TESTE DECLARATII CONSTANTE
const int x[50] := {2, 6, 3}, z := 7, y[5] := {0, 0, 0, 0, 0};
const int pret := 50;
const float cantitate1 := 1.2, cantitate2 := 00.00, cantitate3 := 3.5;
const char ch := 'a';
char myArray[1];

caps punct
{
	int x, y;
}
const punct ORIGINE { x := 0, y := 0}



// TESTE FUNCTII

// declaratii
int sum(bool x, char y, float z);
void print(int x, bool z);
int function_block_test(bool x, char z)
{
	int x;
	int y;
	int x, y, z;
	float aha[50];
}

int test(bool x, char z)
{
	int x;
	int y;
	int x, y, z;
	float aha[50];
};

int test_f1(bool x, char z)
{
	int x;
	int y;
	int x, y, z;
	float aha[50];
	int sum(bool x, char y, float z);

	int test_f2(bool x, char z)
	{
		int x;
		int y;
		int x, y, z;
		float aha[50];

		int test_f3(bool x, char z)
		{
			int x;
			int y;
			int x, y, z;
			float aha[50];
		};

		int x;
		int y;
		int x, y, z;
		float aha[50];

	};

};

// constante
int const_parameter(const int x);
int const_paremeter2(bool t, const int x, char y);
bool const_parameter3(bool t[], const int x[], const char y, string t);

// declaratii + bloc
int sum(int x, int y)
{
	int a;

	a := 3;
	return x + y + a;
}
float avg(float x, float y)
{
	return (x + y) / 2;
}

caps obiect {
	float first;
	float second;
	const float third := 5.2;
	float sum(int a, int b)
	{
		int z := 2

		begin
		return a + b + z;
		end

	}
};


obiect pasare;
obiect pasare2 := {3.5, 5.5};

obiect get_obiect(float x, float second, float third);
int myFunction(obiect pasare1, obiect pasare2, bool zboara);
int myFunction(obiect pasare1, obiect pasare2, bool zboara);
obiect get_obiect(obiect y);

BEGIN
x := (5);
x := 5;
x := 5 + 7;
y := x;
y := x * z;
y := x / 2 + z;
y := x / ((2 + z) - 3);
x := sum(x, y);
x := sum(x, y) / 2 + z;
a := true
sum(x/(2+sum(5,4)), 2+sum(5,4))+ sum(2,5));

id assign id + id(int, id)
while(x > 0)
begin
	x := x - 1;
	if(x = 2 || x = 4)
	begin
		x := x - 1;
		y := y + 1;
	end

end 

x := 5 + ids + function_call(5, id, function_call2());
nume := "Aha";
prenume := "Hah";
prenume := nume + prenume;
compara := nume = prenume;
var := 1.5
obiect.first := avg(obiect.third + cantitate1, cantitate2);
obiect.second := 1.5;

END

int x :=3
int y := 4
sum(x, y);
sum(3,4)
sum(3, sum(3,4));



__________________________________________________
###################################################
TESTE GRESITE
##################################################

const int x[50] := {2, 6, 3}, z := 7, y[5] := {0, 0, 0, 0, 0,};  // virgula de la finalul listei lui y

void print(int x, z); // lipsa celui de-al doilea parametru


caps empty_object
{

}; // lipsa unei declaratii in caps (caps gol);





